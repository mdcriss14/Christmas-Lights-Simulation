
Felicitare_Craciun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800060  00800060  00000718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bf  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005df  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038e  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019e  00000000  00000000  00001fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
   4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
   8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
   c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_4>
  14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  28:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  40:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  48:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  4c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  54:	a5 00       	.word	0x00a5	; ????
  56:	a9 00       	.word	0x00a9	; ????
  58:	ad 00       	.word	0x00ad	; ????
  5a:	b1 00       	.word	0x00b1	; ????
  5c:	b5 00       	.word	0x00b5	; ????
  5e:	b9 00       	.word	0x00b9	; ????
  60:	bd 00       	.word	0x00bd	; ????
  62:	c1 00       	.word	0x00c1	; ????
  64:	c5 00       	.word	0x00c5	; ????
  66:	c9 00       	.word	0x00c9	; ????
  68:	dc 00       	.word	0x00dc	; ????
  6a:	dc 00       	.word	0x00dc	; ????
  6c:	dc 00       	.word	0x00dc	; ????
  6e:	dc 00       	.word	0x00dc	; ????
  70:	dc 00       	.word	0x00dc	; ????
  72:	dc 00       	.word	0x00dc	; ????
  74:	dc 00       	.word	0x00dc	; ????
  76:	dc 00       	.word	0x00dc	; ????
  78:	dc 00       	.word	0x00dc	; ????
  7a:	dc 00       	.word	0x00dc	; ????
  7c:	dc 00       	.word	0x00dc	; ????
  7e:	dc 00       	.word	0x00dc	; ????
  80:	dc 00       	.word	0x00dc	; ????
  82:	dc 00       	.word	0x00dc	; ????
  84:	dc 00       	.word	0x00dc	; ????
  86:	dc 00       	.word	0x00dc	; ????
  88:	dc 00       	.word	0x00dc	; ????
  8a:	dc 00       	.word	0x00dc	; ????
  8c:	dc 00       	.word	0x00dc	; ????
  8e:	dc 00       	.word	0x00dc	; ????
  90:	dc 00       	.word	0x00dc	; ????
  92:	dc 00       	.word	0x00dc	; ????
  94:	dc 00       	.word	0x00dc	; ????
  96:	dc 00       	.word	0x00dc	; ????
  98:	dc 00       	.word	0x00dc	; ????
  9a:	dc 00       	.word	0x00dc	; ????
  9c:	dc 00       	.word	0x00dc	; ????
  9e:	dc 00       	.word	0x00dc	; ????
  a0:	dc 00       	.word	0x00dc	; ????
  a2:	dc 00       	.word	0x00dc	; ????
  a4:	dc 00       	.word	0x00dc	; ????
  a6:	dc 00       	.word	0x00dc	; ????
  a8:	dc 00       	.word	0x00dc	; ????
  aa:	dc 00       	.word	0x00dc	; ????
  ac:	dc 00       	.word	0x00dc	; ????
  ae:	dc 00       	.word	0x00dc	; ????
  b0:	dc 00       	.word	0x00dc	; ????
  b2:	dc 00       	.word	0x00dc	; ????
  b4:	dc 00       	.word	0x00dc	; ????
  b6:	dc 00       	.word	0x00dc	; ????
  b8:	dc 00       	.word	0x00dc	; ????
  ba:	dc 00       	.word	0x00dc	; ????
  bc:	dc 00       	.word	0x00dc	; ????
  be:	dc 00       	.word	0x00dc	; ????
  c0:	dc 00       	.word	0x00dc	; ????
  c2:	dc 00       	.word	0x00dc	; ????
  c4:	dc 00       	.word	0x00dc	; ????
  c6:	dc 00       	.word	0x00dc	; ????
  c8:	dc 00       	.word	0x00dc	; ????
  ca:	dc 00       	.word	0x00dc	; ????
  cc:	dc 00       	.word	0x00dc	; ????
  ce:	dc 00       	.word	0x00dc	; ????
  d0:	dc 00       	.word	0x00dc	; ????
  d2:	dc 00       	.word	0x00dc	; ????
  d4:	dc 00       	.word	0x00dc	; ????
  d6:	dc 00       	.word	0x00dc	; ????
  d8:	dc 00       	.word	0x00dc	; ????
  da:	dc 00       	.word	0x00dc	; ????
  dc:	dc 00       	.word	0x00dc	; ????
  de:	dc 00       	.word	0x00dc	; ????
  e0:	dc 00       	.word	0x00dc	; ????
  e2:	dc 00       	.word	0x00dc	; ????
  e4:	cd 00       	.word	0x00cd	; ????
  e6:	dc 00       	.word	0x00dc	; ????
  e8:	d5 00       	.word	0x00d5	; ????
  ea:	dc 00       	.word	0x00dc	; ????
  ec:	dc 00       	.word	0x00dc	; ????
  ee:	dc 00       	.word	0x00dc	; ????
  f0:	dc 00       	.word	0x00dc	; ????
  f2:	d1 00       	.word	0x00d1	; ????
  f4:	dc 00       	.word	0x00dc	; ????
  f6:	dc 00       	.word	0x00dc	; ????
  f8:	dc 00       	.word	0x00dc	; ????
  fa:	dc 00       	.word	0x00dc	; ????
  fc:	dc 00       	.word	0x00dc	; ????
  fe:	dc 00       	.word	0x00dc	; ????
 100:	dc 00       	.word	0x00dc	; ????
 102:	dc 00       	.word	0x00dc	; ????
 104:	dc 00       	.word	0x00dc	; ????
 106:	d9 00       	.word	0x00d9	; ????

00000108 <__ctors_end>:
 108:	11 24       	eor	r1, r1
 10a:	1f be       	out	0x3f, r1	; 63
 10c:	cf e5       	ldi	r28, 0x5F	; 95
 10e:	d8 e0       	ldi	r29, 0x08	; 8
 110:	de bf       	out	0x3e, r29	; 62
 112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_clear_bss>:
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	a0 e6       	ldi	r26, 0x60	; 96
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
 11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
 11e:	ae 37       	cpi	r26, 0x7E	; 126
 120:	b2 07       	cpc	r27, r18
 122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>
 124:	0e 94 11 03 	call	0x622	; 0x622 <main>
 128:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

0000012c <__bad_interrupt>:
 12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <display>:
#include <util/delay.h>
#include <avr/interrupt.h>

void display(char p, char c)
{
	PORTA = 0b11110000;
 130:	90 ef       	ldi	r25, 0xF0	; 240
 132:	9b bb       	out	0x1b, r25	; 27
	PORTC = 0b00000000;
 134:	15 ba       	out	0x15, r1	; 21
	
	switch(c)
 136:	46 2f       	mov	r20, r22
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	4a 35       	cpi	r20, 0x5A	; 90
 13c:	51 05       	cpc	r21, r1
 13e:	e0 f5       	brcc	.+120    	; 0x1b8 <display+0x88>
 140:	fa 01       	movw	r30, r20
 142:	e6 5d       	subi	r30, 0xD6	; 214
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	0c 94 36 03 	jmp	0x66c	; 0x66c <__tablejump2__>
	{
		case 0:
		PORTC |= 0b00111111; break;
 14a:	95 b3       	in	r25, 0x15	; 21
 14c:	9f 63       	ori	r25, 0x3F	; 63
 14e:	95 bb       	out	0x15, r25	; 21
 150:	33 c0       	rjmp	.+102    	; 0x1b8 <display+0x88>
		case 1:
		PORTC |= 0b00000110; break;
 152:	95 b3       	in	r25, 0x15	; 21
 154:	96 60       	ori	r25, 0x06	; 6
 156:	95 bb       	out	0x15, r25	; 21
 158:	2f c0       	rjmp	.+94     	; 0x1b8 <display+0x88>
		case 2:
		PORTC |= 0b01011011; break;
 15a:	95 b3       	in	r25, 0x15	; 21
 15c:	9b 65       	ori	r25, 0x5B	; 91
 15e:	95 bb       	out	0x15, r25	; 21
 160:	2b c0       	rjmp	.+86     	; 0x1b8 <display+0x88>
		case 3:
		PORTC |= 0b01001111; break;
 162:	95 b3       	in	r25, 0x15	; 21
 164:	9f 64       	ori	r25, 0x4F	; 79
 166:	95 bb       	out	0x15, r25	; 21
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <display+0x88>
		case 4:
		PORTC |= 0b01100110; break;
 16a:	95 b3       	in	r25, 0x15	; 21
 16c:	96 66       	ori	r25, 0x66	; 102
 16e:	95 bb       	out	0x15, r25	; 21
 170:	23 c0       	rjmp	.+70     	; 0x1b8 <display+0x88>
		case 5:
		PORTC |= 0b01101101; break;
 172:	95 b3       	in	r25, 0x15	; 21
 174:	9d 66       	ori	r25, 0x6D	; 109
 176:	95 bb       	out	0x15, r25	; 21
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <display+0x88>
		case 6:
		PORTC |= 0b01111101; break;
 17a:	95 b3       	in	r25, 0x15	; 21
 17c:	9d 67       	ori	r25, 0x7D	; 125
 17e:	95 bb       	out	0x15, r25	; 21
 180:	1b c0       	rjmp	.+54     	; 0x1b8 <display+0x88>
		case 7:
		PORTC |= 0b00000111; break;
 182:	95 b3       	in	r25, 0x15	; 21
 184:	97 60       	ori	r25, 0x07	; 7
 186:	95 bb       	out	0x15, r25	; 21
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <display+0x88>
		case 8:
		PORTC |= 0b01111111; break;
 18a:	95 b3       	in	r25, 0x15	; 21
 18c:	9f 67       	ori	r25, 0x7F	; 127
 18e:	95 bb       	out	0x15, r25	; 21
 190:	13 c0       	rjmp	.+38     	; 0x1b8 <display+0x88>
		case 9:
		PORTC |= 0b01100111; break;
 192:	95 b3       	in	r25, 0x15	; 21
 194:	97 66       	ori	r25, 0x67	; 103
 196:	95 bb       	out	0x15, r25	; 21
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <display+0x88>
		case 'H':
		PORTC |= 0b01110110; break;
 19a:	95 b3       	in	r25, 0x15	; 21
 19c:	96 67       	ori	r25, 0x76	; 118
 19e:	95 bb       	out	0x15, r25	; 21
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <display+0x88>
		case 'O':
		PORTC |= 0b00111111; break;
 1a2:	95 b3       	in	r25, 0x15	; 21
 1a4:	9f 63       	ori	r25, 0x3F	; 63
 1a6:	95 bb       	out	0x15, r25	; 21
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <display+0x88>
		case 'J':
		PORTC |= 0b00001110; break;
 1aa:	95 b3       	in	r25, 0x15	; 21
 1ac:	9e 60       	ori	r25, 0x0E	; 14
 1ae:	95 bb       	out	0x15, r25	; 21
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <display+0x88>
		case 'Y':
		PORTC |= 0b01101110; break;
 1b2:	95 b3       	in	r25, 0x15	; 21
 1b4:	9e 66       	ori	r25, 0x6E	; 110
 1b6:	95 bb       	out	0x15, r25	; 21
	}
	
	switch(p)
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <display+0xa6>
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <display+0x94>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	31 f0       	breq	.+12     	; 0x1ce <display+0x9e>
 1c2:	08 95       	ret
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	59 f0       	breq	.+22     	; 0x1de <display+0xae>
 1c8:	84 30       	cpi	r24, 0x04	; 4
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <display+0xb6>
 1cc:	08 95       	ret
	{
		case 1:
		PORTA |= 0b00000001; break;
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
		case 2:
		PORTA |= 0b00000010; break;
 1d6:	8b b3       	in	r24, 0x1b	; 27
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	08 95       	ret
		case 3:
		PORTA |= 0b00000100; break;
 1de:	8b b3       	in	r24, 0x1b	; 27
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	08 95       	ret
		case 4:
		PORTA |= 0b00001000; break;
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	08 95       	ret

000001ee <init_ADC>:
	}
}

void init_ADC()
{
	ADMUX |= 0b01000000;
 1ee:	87 b1       	in	r24, 0x07	; 7
 1f0:	80 64       	ori	r24, 0x40	; 64
 1f2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0b10000111;
 1f4:	86 b1       	in	r24, 0x06	; 6
 1f6:	87 68       	ori	r24, 0x87	; 135
 1f8:	86 b9       	out	0x06, r24	; 6
 1fa:	08 95       	ret

000001fc <readADC>:

int adc_h, adc_l;

int readADC(int ch)
{
	ADMUX &= 0b11000000;
 1fc:	97 b1       	in	r25, 0x07	; 7
 1fe:	90 7c       	andi	r25, 0xC0	; 192
 200:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ch;
 202:	97 b1       	in	r25, 0x07	; 7
 204:	89 2b       	or	r24, r25
 206:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<6);
 208:	86 b1       	in	r24, 0x06	; 6
 20a:	80 64       	ori	r24, 0x40	; 64
 20c:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<<6));
 20e:	36 99       	sbic	0x06, 6	; 6
 210:	fe cf       	rjmp	.-4      	; 0x20e <readADC+0x12>
	adc_l=ADCL;
 212:	84 b1       	in	r24, 0x04	; 4
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <adc_l+0x1>
 21a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <adc_l>
	adc_h=ADCH;
 21e:	25 b1       	in	r18, 0x05	; 5
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <adc_h+0x1>
 226:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <adc_h>
	return (adc_h<<8)|(adc_l);
 22a:	32 2f       	mov	r19, r18
 22c:	22 27       	eor	r18, r18
}
 22e:	82 2b       	or	r24, r18
 230:	93 2b       	or	r25, r19
 232:	08 95       	ret

00000234 <init_pwm>:


void init_pwm()
{
	TCCR0|=0b011101011;
 234:	83 b7       	in	r24, 0x33	; 51
 236:	8b 6e       	ori	r24, 0xEB	; 235
 238:	83 bf       	out	0x33, r24	; 51
	OCR0|=84;
 23a:	8c b7       	in	r24, 0x3c	; 60
 23c:	84 65       	ori	r24, 0x54	; 84
 23e:	8c bf       	out	0x3c, r24	; 60
	DDRB |= (1<<3);
 240:	87 b3       	in	r24, 0x17	; 23
 242:	88 60       	ori	r24, 0x08	; 8
 244:	87 bb       	out	0x17, r24	; 23
 246:	08 95       	ret

00000248 <init_timer>:
}

void init_timer()
{
	TCCR2 |= 0b00001100;
 248:	85 b5       	in	r24, 0x25	; 37
 24a:	8c 60       	ori	r24, 0x0C	; 12
 24c:	85 bd       	out	0x25, r24	; 37
	OCR2 =125;
 24e:	8d e7       	ldi	r24, 0x7D	; 125
 250:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 0b10000000;
 252:	89 b7       	in	r24, 0x39	; 57
 254:	80 68       	ori	r24, 0x80	; 128
 256:	89 bf       	out	0x39, r24	; 57
 258:	08 95       	ret

0000025a <__vector_4>:

int current_pattern = 0; 
int last_button_state = 0;

ISR(TIMER2_COMP_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ef 93       	push	r30
 27e:	ff 93       	push	r31
	int button_state = PINB & (1<<PB7);
 280:	86 b3       	in	r24, 0x16	; 22
 282:	80 78       	andi	r24, 0x80	; 128
 284:	90 e0       	ldi	r25, 0x00	; 0
	if(button_state && !last_button_state)
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	d1 f0       	breq	.+52     	; 0x2be <__vector_4+0x64>
 28a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 28e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 292:	23 2b       	or	r18, r19
 294:	a1 f4       	brne	.+40     	; 0x2be <__vector_4+0x64>
	{
		if(current_pattern >= 3)
 296:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <current_pattern>
 29a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <current_pattern+0x1>
 29e:	23 30       	cpi	r18, 0x03	; 3
 2a0:	31 05       	cpc	r19, r1
 2a2:	3c f0       	brlt	.+14     	; 0x2b2 <__vector_4+0x58>
		{
			current_pattern = 1;  
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <current_pattern+0x1>
 2ac:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <current_pattern>
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <__vector_4+0x64>
		} 
		else 
		{
			current_pattern++;    
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <current_pattern+0x1>
 2ba:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <current_pattern>
		}
	}
	last_button_state = button_state;
 2be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(current_pattern == 1) 
 2c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <current_pattern>
 2ca:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <current_pattern+0x1>
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <__vector_4+0x7a>
 2d2:	6c c0       	rjmp	.+216    	; 0x3ac <__vector_4+0x152>
	{
		ms1++;
 2d4:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <ms1>
 2d8:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <ms1+0x1>
 2dc:	21 96       	adiw	r28, 0x01	; 1
 2de:	d0 93 79 00 	sts	0x0079, r29	; 0x800079 <ms1+0x1>
 2e2:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <ms1>
		if (ms1 % readADC(6) == 0)
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <readADC>
 2ee:	bc 01       	movw	r22, r24
 2f0:	ce 01       	movw	r24, r28
 2f2:	0e 94 22 03 	call	0x644	; 0x644 <__divmodhi4>
 2f6:	89 2b       	or	r24, r25
 2f8:	61 f5       	brne	.+88     	; 0x352 <__vector_4+0xf8>
		{
			if(led_state==3)
 2fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <led_state>
 2fe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <led_state+0x1>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	91 05       	cpc	r25, r1
 306:	29 f4       	brne	.+10     	; 0x312 <__vector_4+0xb8>
			led_state++;
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <led_state+0x1>
 30e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <led_state>
			if (led_state <= 6)
 312:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <led_state>
 316:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <led_state+0x1>
 31a:	27 30       	cpi	r18, 0x07	; 7
 31c:	31 05       	cpc	r19, r1
 31e:	a4 f4       	brge	.+40     	; 0x348 <__vector_4+0xee>
			{
				PORTD |= (1 << led_state);
 320:	32 b3       	in	r19, 0x12	; 18
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <__vector_4+0xd2>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	2a 95       	dec	r18
 32e:	e2 f7       	brpl	.-8      	; 0x328 <__vector_4+0xce>
 330:	83 2b       	or	r24, r19
 332:	82 bb       	out	0x12, r24	; 18
				led_state++;
 334:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <led_state>
 338:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <led_state+0x1>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <led_state+0x1>
 342:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <led_state>
 346:	05 c0       	rjmp	.+10     	; 0x352 <__vector_4+0xf8>
			}
			else
			{
				PORTD = 0b00000000;
 348:	12 ba       	out	0x12, r1	; 18
				led_state = 0;
 34a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <led_state+0x1>
 34e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <led_state>
			}
		}
		digit1++;
 352:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <digit1>
 356:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <digit1+0x1>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <digit1+0x1>
 360:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <digit1>
		switch(digit1)
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	91 05       	cpc	r25, r1
 368:	79 f0       	breq	.+30     	; 0x388 <__vector_4+0x12e>
 36a:	1c f4       	brge	.+6      	; 0x372 <__vector_4+0x118>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	39 f0       	breq	.+14     	; 0x37e <__vector_4+0x124>
 370:	1d c0       	rjmp	.+58     	; 0x3ac <__vector_4+0x152>
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	91 05       	cpc	r25, r1
 376:	69 f0       	breq	.+26     	; 0x392 <__vector_4+0x138>
 378:	04 97       	sbiw	r24, 0x04	; 4
 37a:	81 f0       	breq	.+32     	; 0x39c <__vector_4+0x142>
 37c:	17 c0       	rjmp	.+46     	; 0x3ac <__vector_4+0x152>
		{
			case 1: display(1, 'H' ); break;
 37e:	68 e4       	ldi	r22, 0x48	; 72
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 98 00 	call	0x130	; 0x130 <display>
 386:	12 c0       	rjmp	.+36     	; 0x3ac <__vector_4+0x152>
			case 2: display(2, 'O'); break;
 388:	6f e4       	ldi	r22, 0x4F	; 79
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 98 00 	call	0x130	; 0x130 <display>
 390:	0d c0       	rjmp	.+26     	; 0x3ac <__vector_4+0x152>
			case 3: display(3, 'H'); break;
 392:	68 e4       	ldi	r22, 0x48	; 72
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	0e 94 98 00 	call	0x130	; 0x130 <display>
 39a:	08 c0       	rjmp	.+16     	; 0x3ac <__vector_4+0x152>
			case 4: display(4, 'O'); digit1 = 0; break;
 39c:	6f e4       	ldi	r22, 0x4F	; 79
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	0e 94 98 00 	call	0x130	; 0x130 <display>
 3a4:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <digit1+0x1>
 3a8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <digit1>
		}
	}
	 if(current_pattern == 2)  
 3ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <current_pattern>
 3b0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <current_pattern+0x1>
 3b4:	02 97       	sbiw	r24, 0x02	; 2
 3b6:	09 f0       	breq	.+2      	; 0x3ba <__vector_4+0x160>
 3b8:	82 c0       	rjmp	.+260    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
	{
		ms2++;
 3ba:	c0 91 76 00 	lds	r28, 0x0076	; 0x800076 <ms2>
 3be:	d0 91 77 00 	lds	r29, 0x0077	; 0x800077 <ms2+0x1>
 3c2:	21 96       	adiw	r28, 0x01	; 1
 3c4:	d0 93 77 00 	sts	0x0077, r29	; 0x800077 <ms2+0x1>
 3c8:	c0 93 76 00 	sts	0x0076, r28	; 0x800076 <ms2>
		if (ms2 % readADC(6) == 0)
 3cc:	86 e0       	ldi	r24, 0x06	; 6
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <readADC>
 3d4:	bc 01       	movw	r22, r24
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 22 03 	call	0x644	; 0x644 <__divmodhi4>
 3dc:	89 2b       	or	r24, r25
 3de:	09 f0       	breq	.+2      	; 0x3e2 <__vector_4+0x188>
 3e0:	4b c0       	rjmp	.+150    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			if (phase == 0)
 3e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <phase>
 3e6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <phase+0x1>
 3ea:	00 97       	sbiw	r24, 0x00	; 0
 3ec:	19 f5       	brne	.+70     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			{
				PORTD ^= (1 << 0);
 3ee:	92 b3       	in	r25, 0x12	; 18
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	89 27       	eor	r24, r25
 3f4:	82 bb       	out	0x12, r24	; 18
				PORTD ^= (1 << 2);
 3f6:	92 b3       	in	r25, 0x12	; 18
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	89 27       	eor	r24, r25
 3fc:	82 bb       	out	0x12, r24	; 18
				PORTD ^= (1 << 5);
 3fe:	92 b3       	in	r25, 0x12	; 18
 400:	80 e2       	ldi	r24, 0x20	; 32
 402:	89 27       	eor	r24, r25
 404:	82 bb       	out	0x12, r24	; 18
				blink_count++;
 406:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <blink_count>
 40a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <blink_count+0x1>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <blink_count+0x1>
 414:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <blink_count>
				if (blink_count >= 4)
 418:	04 97       	sbiw	r24, 0x04	; 4
 41a:	74 f1       	brlt	.+92     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				{
					blink_count = 0;
 41c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <blink_count+0x1>
 420:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blink_count>
					phase = 1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <phase+0x1>
 42c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <phase>
					PORTD = 0b00000000;
 430:	12 ba       	out	0x12, r1	; 18
 432:	22 c0       	rjmp	.+68     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				}
			}
			else if (phase == 1)
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	01 f5       	brne	.+64     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
			{
				PORTD ^= (1 << 1);
 438:	92 b3       	in	r25, 0x12	; 18
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	89 27       	eor	r24, r25
 43e:	82 bb       	out	0x12, r24	; 18
				PORTD ^= (1 << 4);
 440:	92 b3       	in	r25, 0x12	; 18
 442:	80 e1       	ldi	r24, 0x10	; 16
 444:	89 27       	eor	r24, r25
 446:	82 bb       	out	0x12, r24	; 18
				PORTD ^= (1 << 6);
 448:	92 b3       	in	r25, 0x12	; 18
 44a:	80 e4       	ldi	r24, 0x40	; 64
 44c:	89 27       	eor	r24, r25
 44e:	82 bb       	out	0x12, r24	; 18
				blink_count++;
 450:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <blink_count>
 454:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <blink_count+0x1>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <blink_count+0x1>
 45e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <blink_count>
				if (blink_count >= 4)
 462:	04 97       	sbiw	r24, 0x04	; 4
 464:	4c f0       	brlt	.+18     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
				{
					blink_count = 0;
 466:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <blink_count+0x1>
 46a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blink_count>
					phase = 0;
 46e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <phase+0x1>
 472:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <phase>
					PORTD = 0b00000000;
 476:	12 ba       	out	0x12, r1	; 18
				}
			}
		}
		digit2++;
 478:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <digit2>
 47c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <digit2+0x1>
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <digit2+0x1>
 486:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <digit2>
		switch(digit2)
 48a:	83 30       	cpi	r24, 0x03	; 3
 48c:	91 05       	cpc	r25, r1
 48e:	51 f0       	breq	.+20     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 490:	84 30       	cpi	r24, 0x04	; 4
 492:	91 05       	cpc	r25, r1
 494:	61 f0       	breq	.+24     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 496:	02 97       	sbiw	r24, 0x02	; 2
 498:	91 f4       	brne	.+36     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		{
			case 2: display(2, 'J'); break;
 49a:	6a e4       	ldi	r22, 0x4A	; 74
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 98 00 	call	0x130	; 0x130 <display>
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			case 3: display(3, 'O'); break;
 4a4:	6f e4       	ldi	r22, 0x4F	; 79
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	0e 94 98 00 	call	0x130	; 0x130 <display>
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			case 4: display(4, 'Y'); digit2 = 0; break;
 4ae:	69 e5       	ldi	r22, 0x59	; 89
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	0e 94 98 00 	call	0x130	; 0x130 <display>
 4b6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <digit2+0x1>
 4ba:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <digit2>
		}
	}
	 if(current_pattern == 3)  
 4be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <current_pattern>
 4c2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <current_pattern+0x1>
 4c6:	03 97       	sbiw	r24, 0x03	; 3
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4ca:	98 c0       	rjmp	.+304    	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
	{
		ms3++;
 4cc:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <ms3>
 4d0:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <ms3+0x1>
 4d4:	21 96       	adiw	r28, 0x01	; 1
 4d6:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <ms3+0x1>
 4da:	c0 93 74 00 	sts	0x0074, r28	; 0x800074 <ms3>
		if (ms3 % readADC(6) == 0)
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <readADC>
 4e6:	bc 01       	movw	r22, r24
 4e8:	ce 01       	movw	r24, r28
 4ea:	0e 94 22 03 	call	0x644	; 0x644 <__divmodhi4>
 4ee:	89 2b       	or	r24, r25
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4f2:	57 c0       	rjmp	.+174    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
		{

			if (direction == 1)
 4f4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <direction>
 4f8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <direction+0x1>
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	71 f5       	brne	.+92     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
			{
				PORTD |= (1 << led_index);
 500:	22 b3       	in	r18, 0x12	; 18
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <led_index>
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 514:	82 2b       	or	r24, r18
 516:	82 bb       	out	0x12, r24	; 18
				led_index++;
 518:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led_index>
 51c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led_index+0x1>
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <led_index+0x1>
 526:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led_index>
				if(led_index==3)
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	91 05       	cpc	r25, r1
 52e:	29 f4       	brne	.+10     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
				led_index++;
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <led_index+0x1>
 536:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led_index>
				if (led_index > 7)
 53a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led_index>
 53e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led_index+0x1>
 542:	08 97       	sbiw	r24, 0x08	; 8
 544:	74 f1       	brlt	.+92     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				{
					led_index = 6;
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <led_index+0x1>
 54e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led_index>
					direction = 0;
 552:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <direction+0x1>
 556:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <direction>
 55a:	23 c0       	rjmp	.+70     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				}
			}
			else
			{
				PORTD &= ~(1 << led_index);
 55c:	22 b3       	in	r18, 0x12	; 18
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <led_index>
 566:	02 c0       	rjmp	.+4      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	0a 94       	dec	r0
 56e:	e2 f7       	brpl	.-8      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 570:	80 95       	com	r24
 572:	82 23       	and	r24, r18
 574:	82 bb       	out	0x12, r24	; 18
				led_index--;
 576:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led_index>
 57a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led_index+0x1>
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <led_index+0x1>
 584:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <led_index>
				if (led_index < 0)
 588:	99 23       	and	r25, r25
 58a:	5c f4       	brge	.+22     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				{
					led_index = 0;
 58c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <led_index+0x1>
 590:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <led_index>
					direction = 1;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <direction+0x1>
 59c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <direction>
					PORTD = 0b00000000;
 5a0:	12 ba       	out	0x12, r1	; 18
				}
			}
		}
		digit3++;
 5a2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <digit3>
 5a6:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <digit3+0x1>
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <digit3+0x1>
 5b0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <digit3>
		switch(digit3)
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	91 05       	cpc	r25, r1
 5b8:	79 f0       	breq	.+30     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 5ba:	1c f4       	brge	.+6      	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	39 f0       	breq	.+14     	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
 5c0:	1d c0       	rjmp	.+58     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	91 05       	cpc	r25, r1
 5c6:	69 f0       	breq	.+26     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5c8:	04 97       	sbiw	r24, 0x04	; 4
 5ca:	81 f0       	breq	.+32     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
 5cc:	17 c0       	rjmp	.+46     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
		{
			case 1: display(1, 2); break;
 5ce:	62 e0       	ldi	r22, 0x02	; 2
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 98 00 	call	0x130	; 0x130 <display>
 5d6:	12 c0       	rjmp	.+36     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
			case 2: display(2, 0); break;
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 98 00 	call	0x130	; 0x130 <display>
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
			case 3: display(3, 2); break;
 5e2:	62 e0       	ldi	r22, 0x02	; 2
 5e4:	83 e0       	ldi	r24, 0x03	; 3
 5e6:	0e 94 98 00 	call	0x130	; 0x130 <display>
 5ea:	08 c0       	rjmp	.+16     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
			case 4: display(4, 5); digit3 = 0; break;
 5ec:	65 e0       	ldi	r22, 0x05	; 5
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	0e 94 98 00 	call	0x130	; 0x130 <display>
 5f4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <digit3+0x1>
 5f8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <digit3>
		}
	}
}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <main>:

int main(void)
{
	DDRD = 0b01111111;  
 622:	8f e7       	ldi	r24, 0x7F	; 127
 624:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b10000000; 
 626:	80 e8       	ldi	r24, 0x80	; 128
 628:	82 bb       	out	0x12, r24	; 18
	DDRB |= 0b00000111;
 62a:	87 b3       	in	r24, 0x17	; 23
 62c:	87 60       	ori	r24, 0x07	; 7
 62e:	87 bb       	out	0x17, r24	; 23
	init_pwm();
 630:	0e 94 1a 01 	call	0x234	; 0x234 <init_pwm>
	init_timer();
 634:	0e 94 24 01 	call	0x248	; 0x248 <init_timer>
	init_ADC();
 638:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_ADC>
	SREG |= (1<<7);
 63c:	8f b7       	in	r24, 0x3f	; 63
 63e:	80 68       	ori	r24, 0x80	; 128
 640:	8f bf       	out	0x3f, r24	; 63
 642:	ff cf       	rjmp	.-2      	; 0x642 <main+0x20>

00000644 <__divmodhi4>:
 644:	97 fb       	bst	r25, 7
 646:	07 2e       	mov	r0, r23
 648:	16 f4       	brtc	.+4      	; 0x64e <__divmodhi4+0xa>
 64a:	00 94       	com	r0
 64c:	07 d0       	rcall	.+14     	; 0x65c <__divmodhi4_neg1>
 64e:	77 fd       	sbrc	r23, 7
 650:	09 d0       	rcall	.+18     	; 0x664 <__divmodhi4_neg2>
 652:	0e 94 3c 03 	call	0x678	; 0x678 <__udivmodhi4>
 656:	07 fc       	sbrc	r0, 7
 658:	05 d0       	rcall	.+10     	; 0x664 <__divmodhi4_neg2>
 65a:	3e f4       	brtc	.+14     	; 0x66a <__divmodhi4_exit>

0000065c <__divmodhi4_neg1>:
 65c:	90 95       	com	r25
 65e:	81 95       	neg	r24
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__divmodhi4_neg2>:
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255

0000066a <__divmodhi4_exit>:
 66a:	08 95       	ret

0000066c <__tablejump2__>:
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	05 90       	lpm	r0, Z+
 672:	f4 91       	lpm	r31, Z
 674:	e0 2d       	mov	r30, r0
 676:	09 94       	ijmp

00000678 <__udivmodhi4>:
 678:	aa 1b       	sub	r26, r26
 67a:	bb 1b       	sub	r27, r27
 67c:	51 e1       	ldi	r21, 0x11	; 17
 67e:	07 c0       	rjmp	.+14     	; 0x68e <__udivmodhi4_ep>

00000680 <__udivmodhi4_loop>:
 680:	aa 1f       	adc	r26, r26
 682:	bb 1f       	adc	r27, r27
 684:	a6 17       	cp	r26, r22
 686:	b7 07       	cpc	r27, r23
 688:	10 f0       	brcs	.+4      	; 0x68e <__udivmodhi4_ep>
 68a:	a6 1b       	sub	r26, r22
 68c:	b7 0b       	sbc	r27, r23

0000068e <__udivmodhi4_ep>:
 68e:	88 1f       	adc	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	5a 95       	dec	r21
 694:	a9 f7       	brne	.-22     	; 0x680 <__udivmodhi4_loop>
 696:	80 95       	com	r24
 698:	90 95       	com	r25
 69a:	bc 01       	movw	r22, r24
 69c:	cd 01       	movw	r24, r26
 69e:	08 95       	ret

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
